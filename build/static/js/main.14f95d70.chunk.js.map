{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","firstNameRef","useRef","lastNameRef","phoneNoRef","useState","Data","data","setData","firstName","setFirstName","lastName","setLastName","phoneNo","setPhoneNo","updateID","setUpdateID","updateFirstName","setUpdateFirstName","updateLastName","setUpdateLastName","updatePhoneNo","setUpdatePhoneNo","useEffect","current","value","saveJson","contacts","axios","post","then","response","className","placeholder","onChange","e","target","ref","onClick","newContact","uuidv1","editedContact","filterContact","filter","OBJ","id","map","contact","key","populateContact","filterOutContact","deleteContact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14f95d70.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport Data from \"./contactDetails.json\";\nimport { v1 as uuidv1 } from 'uuid';\nimport axios from 'axios';\n\nfunction App() {\n\n  // Reference\n  const firstNameRef = useRef();\n  const lastNameRef = useRef();\n  const phoneNoRef = useRef();\n\n  // State\n  const [data, setData] = useState(Data);\n\n  // Temp State\n  const [firstName, setFirstName] = useState();\n  const [lastName, setLastName] = useState();\n  const [phoneNo, setPhoneNo] = useState();\n\n  const [updateID, setUpdateID] = useState();\n  const [updateFirstName, setUpdateFirstName] = useState();\n  const [updateLastName, setUpdateLastName] = useState();\n  const [updatePhoneNo, setUpdatePhoneNo] = useState();\n\n  // Effect\n  useEffect(() => {\n    //console.log(data);\n    //setData(Data);\n    // clear contents from fields\n    firstNameRef.current.value = '';\n    lastNameRef.current.value = '';\n    phoneNoRef.current.value = '';\n  }, [data]);\n\n  // Add contact\n  const addContact = () => {\n    if (firstName && lastName && phoneNo) {\n      // create new contact object\n      let newContact = {\n        \"id\": uuidv1(),\n        \"firstName\": firstName,\n        \"lastName\": lastName,\n        \"phoneNo\": phoneNo\n      }\n      // merge new contact with old contacts\n      let contacts = [...data, newContact];\n      // push new object to state\n      setData(contacts);\n      // clear contents from state\n      setFirstName();\n      setLastName();\n      setPhoneNo();\n\n      // add in json file\n    saveJson(contacts);\n\n\n    }\n\n  }\n\n  // Delete Contact\n  const deleteContact = (key) => {\n\n    let filterOutContact = [...data].filter(OBJ => OBJ.id !== key);\n    setData(filterOutContact)\n\n    // delete in json file\n    saveJson(filterOutContact);\n\n  }\n\n  // Populate Contact\n  const populateContact = (key, firstName, lastName, phoneNo) => {\n    setUpdateID(key);\n    setUpdateFirstName(firstName);\n    setUpdateLastName(lastName);\n    setUpdatePhoneNo(phoneNo);\n\n  }\n\n  // Update Contact\n  const updateContact = () => {\n    let editedContact = {\n      \"id\":updateID,\n      \"firstName\": updateFirstName,\n      \"lastName\": updateLastName,\n      \"phoneNo\": updatePhoneNo\n    }\n    // remove old post with same id\n    let filterContact = [...data].filter(OBJ=>OBJ.id!==updateID);\n    let contacts = [...filterContact,editedContact];\n    //push to state\n    setData(contacts);\n\n    setUpdateID();\n    setUpdateFirstName();\n    setUpdateLastName();\n    setUpdatePhoneNo();\n    \n    // write to json file\n    saveJson(contacts);\n    \n  }\n\n  // Write to json file\n  const saveJson = (contacts) => {\n    const url = 'http://localhost:5000/write'\n    axios.post(url,contacts)\n    .then(response => {\n      //console.log(response)\n    });\n\n  }\n\n\n\n  return (\n    <div className=\"App\">\n\n      <div>\n        <h4>Add new contact</h4>\n        <input\n          placeholder=\"Enter First Name\"\n          onChange={e => setFirstName(e.target.value)} value={firstName || ''}\n          ref={firstNameRef}>\n        </input>\n        <br />\n        <input\n          placeholder=\"Enter Last Name\"\n          onChange={e => setLastName(e.target.value)} value={lastName || ''}\n          ref={lastNameRef}>\n        </input>\n        <br />\n        <input\n          placeholder=\"Enter phone number\"\n          onChange={e => setPhoneNo(e.target.value)} value={phoneNo || ''}\n          ref={phoneNoRef}>\n        </input>\n        <br />\n        <button onClick={addContact} >Add Contact</button>\n      </div>\n\n      {updateFirstName || updateLastName || updatePhoneNo ?\n      (\n\n        <div>\n          <h4>Update contact</h4>\n          <input\n            placeholder=\"Enter First Name\"\n            onChange={e => setUpdateFirstName(e.target.value)} value={updateFirstName || ''}>\n          </input>\n          <br />\n          <input\n            placeholder=\"Enter Last Name\"\n            onChange={e => setUpdateLastName(e.target.value)} value={updateLastName || ''}>\n          </input>\n          <br />\n          <input\n            placeholder=\"Enter phone number\"\n            onChange={e => setUpdatePhoneNo(e.target.value)} value={updatePhoneNo || ''}>\n          </input>\n          <br />\n          <button onClick={updateContact}>Update Contact</button>\n        </div>\n      ): null}\n\n      <div className=\"contacts\">\n        {data ? data.map(contact => {\n          return (\n\n            <div key={contact.id} className=\"contact\">\n              <h3>{contact.firstName} {contact.lastName}</h3>\n              <p>{contact.phoneNo}</p>\n              <button\n                onClick={\n                  () => populateContact(contact.id, contact.firstName, contact.lastName, contact.phoneNo)\n                } >Edit</button>\n              <button onClick={() => deleteContact(contact.id)} >Delete</button>\n            </div>\n\n          )\n        }) : null}\n      </div>\n    </div>\n  )\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}